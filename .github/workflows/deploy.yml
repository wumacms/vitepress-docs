name: Deploy VitePress site to Pages

# 当推送到 master 分支时触发部署流程
on:
  push:
    branches: [master]

# 设置 GitHub Pages 部署所需权限
permissions:
  contents: read           # 允许读取代码内容
  pages: write             # 允许写入 Pages 部署内容
  id-token: write          # 允许生成 OIDC token，用于身份验证等

# 限制并发：只允许一个 Pages 构建任务运行，避免重复部署
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # 构建网站的任务
  build:
    runs-on: ubuntu-latest  # 使用 GitHub 提供的最新版 Ubuntu 环境

    steps:
      - name: Checkout 源代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 完整克隆仓库（如果你用到了 git 时间戳）

      - name: 安装 Node.js（并启用 yarn 缓存）
        uses: actions/setup-node@v3
        with:
          node-version: 18       # 使用 Node.js v18
          cache: yarn            # 自动缓存 yarn 安装的依赖，提升速度

      - name: 配置 GitHub Pages 环境
        uses: actions/configure-pages@v3  # 自动设置 GitHub Pages 相关的环境变量

      - name: 安装依赖
        run: yarn install  # 使用 yarn 安装项目依赖

      - name: 构建 VitePress 网站
        run: |
          yarn build       # 调用 package.json 中的 "build": "vitepress build"
          touch .nojekyll  # 防止 GitHub Pages 使用 Jekyll 处理静态资源（必须）

      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v2
        with:
          path: .vitepress/dist  # 指定构建后的输出目录为 .vitepress/dist

  # 部署任务（依赖构建任务完成）
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}  # 输出部署后的 URL

    needs: build             # 在构建任务完成之后再运行部署
    runs-on: ubuntu-latest   # 同样使用 Ubuntu 环境
    name: Deploy

    steps:
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2  # 使用官方动作将 artifact 部署到 Pages
